// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "helloworld.proto" (package "helloworld", syntax proto3)
// tslint:disable
//
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Greeter } from "./helloworld";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { HelloReply } from "./helloworld";
import type { HelloRequest } from "./helloworld";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * The greeting service definition.
 *
 * @generated from protobuf service helloworld.Greeter
 */
export interface IGreeterClient {
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply>;
    /**
     * @generated from protobuf rpc: SayHelloStreamReply(helloworld.HelloRequest) returns (stream helloworld.HelloReply);
     */
    sayHelloStreamReply(input: HelloRequest, options?: RpcOptions): ServerStreamingCall<HelloRequest, HelloReply>;
}
/**
 * The greeting service definition.
 *
 * @generated from protobuf service helloworld.Greeter
 */
export class GreeterClient implements IGreeterClient, ServiceInfo {
    typeName = Greeter.typeName;
    methods = Greeter.methods;
    options = Greeter.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Sends a greeting
     *
     * @generated from protobuf rpc: SayHello(helloworld.HelloRequest) returns (helloworld.HelloReply);
     */
    sayHello(input: HelloRequest, options?: RpcOptions): UnaryCall<HelloRequest, HelloReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloRequest, HelloReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SayHelloStreamReply(helloworld.HelloRequest) returns (stream helloworld.HelloReply);
     */
    sayHelloStreamReply(input: HelloRequest, options?: RpcOptions): ServerStreamingCall<HelloRequest, HelloReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<HelloRequest, HelloReply>("serverStreaming", this._transport, method, opt, input);
    }
}
